// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by mkcgo. DO NOT EDIT.

//go:build !cgo

package commoncrypto

import (
	"runtime"
	"unsafe"
)

var _ = runtime.GOOS

//go:cgo_import_dynamic _mkcgo_CCCrypt CCCrypt "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorCreate CCCryptorCreate "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorCreateWithMode CCCryptorCreateWithMode "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorRelease CCCryptorRelease "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorReset CCCryptorReset "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorUpdate CCCryptorUpdate "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCKeyDerivationPBKDF CCKeyDerivationPBKDF "/System/Library/Frameworks/System.framework/Versions/B/System"

type CCCryptorRef unsafe.Pointer
type CCModeOptions = uint32

type CCOperation int32

type CCMode int32

type CCOptions int32

type CCCryptorStatus int32

type CCPBKDFAlgorithm int32

type CCPseudoRandomAlgorithm int32

type CCPadding int32

type CCAlgorithm int32

var _mkcgo_CCCrypt_trampoline_addr uintptr

func CCCrypt(op CCOperation, alg CCAlgorithm, options CCOptions, key []byte, iv []byte, dataIn []byte, dataOut []byte, dataOutMoved *int) CCCryptorStatus {
	r0, _ := syscallN(0, _mkcgo_CCCrypt_trampoline_addr, uintptr(op), uintptr(alg), uintptr(options), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(len(key)), uintptr(unsafe.Pointer(unsafe.SliceData(iv))), uintptr(unsafe.Pointer(unsafe.SliceData(dataIn))), uintptr(len(dataIn)), uintptr(unsafe.Pointer(unsafe.SliceData(dataOut))), uintptr(len(dataOut)), uintptr(unsafe.Pointer(dataOutMoved)))
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorCreate_trampoline_addr uintptr

func CCCryptorCreate(op CCOperation, alg CCAlgorithm, options CCOptions, key []byte, iv []byte, cryptorRef *CCCryptorRef) CCCryptorStatus {
	r0, _ := syscallN(0, _mkcgo_CCCryptorCreate_trampoline_addr, uintptr(op), uintptr(alg), uintptr(options), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(len(key)), uintptr(unsafe.Pointer(unsafe.SliceData(iv))), uintptr(unsafe.Pointer(cryptorRef)))
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorCreateWithMode_trampoline_addr uintptr

func CCCryptorCreateWithMode(op CCOperation, mode CCMode, alg CCAlgorithm, padding CCPadding, iv []byte, key []byte, tweak []byte, numRounds int32, options CCModeOptions, cryptorRef *CCCryptorRef) CCCryptorStatus {
	var r0 uintptr
	if runtime.GOOS == "darwin" && runtime.GOARCH == "arm64" {
		r0, _ = syscallN(0, _mkcgo_CCCryptorCreateWithMode_trampoline_addr, uintptr(op), uintptr(mode), uintptr(alg), uintptr(padding), uintptr(unsafe.Pointer(unsafe.SliceData(iv))), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(len(key)), uintptr(unsafe.Pointer(unsafe.SliceData(tweak))), uintptr(len(tweak)), uintptr(numRounds)<<32|uintptr(options), uintptr(unsafe.Pointer(cryptorRef)))
	} else {
		r0, _ = syscallN(0, _mkcgo_CCCryptorCreateWithMode_trampoline_addr, uintptr(op), uintptr(mode), uintptr(alg), uintptr(padding), uintptr(unsafe.Pointer(unsafe.SliceData(iv))), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(len(key)), uintptr(unsafe.Pointer(unsafe.SliceData(tweak))), uintptr(len(tweak)), uintptr(numRounds), uintptr(options), uintptr(unsafe.Pointer(cryptorRef)))
	}
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorRelease_trampoline_addr uintptr

func CCCryptorRelease(cryptorRef CCCryptorRef) CCCryptorStatus {
	r0, _ := syscallN(0, _mkcgo_CCCryptorRelease_trampoline_addr, uintptr(cryptorRef))
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorReset_trampoline_addr uintptr

func CCCryptorReset(cryptorRef CCCryptorRef, iv []byte) CCCryptorStatus {
	r0, _ := syscallN(0, _mkcgo_CCCryptorReset_trampoline_addr, uintptr(cryptorRef), uintptr(unsafe.Pointer(unsafe.SliceData(iv))))
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorUpdate_trampoline_addr uintptr

func CCCryptorUpdate(cryptorRef CCCryptorRef, dataIn []byte, dataOut []byte, dataOutMoved *int) CCCryptorStatus {
	r0, _ := syscallN(0, _mkcgo_CCCryptorUpdate_trampoline_addr, uintptr(cryptorRef), uintptr(unsafe.Pointer(unsafe.SliceData(dataIn))), uintptr(len(dataIn)), uintptr(unsafe.Pointer(unsafe.SliceData(dataOut))), uintptr(len(dataOut)), uintptr(unsafe.Pointer(dataOutMoved)))
	return CCCryptorStatus(r0)
}

var _mkcgo_CCKeyDerivationPBKDF_trampoline_addr uintptr

func CCKeyDerivationPBKDF(algorithm CCPBKDFAlgorithm, password []byte, salt []uint8, prf CCPseudoRandomAlgorithm, rounds uint32, derivedKey []uint8) CCCryptorStatus {
	r0, _ := syscallN(0, _mkcgo_CCKeyDerivationPBKDF_trampoline_addr, uintptr(algorithm), uintptr(unsafe.Pointer(unsafe.SliceData(password))), uintptr(len(password)), uintptr(unsafe.Pointer(unsafe.SliceData(salt))), uintptr(len(salt)), uintptr(prf), uintptr(rounds), uintptr(unsafe.Pointer(unsafe.SliceData(derivedKey))), uintptr(len(derivedKey)))
	return CCCryptorStatus(r0)
}
