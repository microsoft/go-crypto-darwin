// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// Code generated by mkcgo. DO NOT EDIT.

package cryptokit

/*
#cgo CFLAGS: -Wno-attributes
#include "zcryptokit.h"
*/
import "C"
import "unsafe"

//go:nosplit
func mkcgoNoEscape(p *C.mkcgo_err_state) *C.mkcgo_err_state {
	x := uintptr(unsafe.Pointer(p))
	return (*C.mkcgo_err_state)(unsafe.Pointer(x ^ 0))
}

func MD5(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	C._mkcgo_MD5((*C.uint8_t)(unsafe.Pointer(inputPointer)), C.size_t(inputLength), (*C.uint8_t)(unsafe.Pointer(outputPointer)))
}

func SHA1(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	C._mkcgo_SHA1((*C.uint8_t)(unsafe.Pointer(inputPointer)), C.size_t(inputLength), (*C.uint8_t)(unsafe.Pointer(outputPointer)))
}

func SHA256(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	C._mkcgo_SHA256((*C.uint8_t)(unsafe.Pointer(inputPointer)), C.size_t(inputLength), (*C.uint8_t)(unsafe.Pointer(outputPointer)))
}

func SHA384(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	C._mkcgo_SHA384((*C.uint8_t)(unsafe.Pointer(inputPointer)), C.size_t(inputLength), (*C.uint8_t)(unsafe.Pointer(outputPointer)))
}

func SHA512(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	C._mkcgo_SHA512((*C.uint8_t)(unsafe.Pointer(inputPointer)), C.size_t(inputLength), (*C.uint8_t)(unsafe.Pointer(outputPointer)))
}

func CopyHMAC(hashAlgorithm int32, ptr unsafe.Pointer) unsafe.Pointer {
	return C._mkcgo_copyHMAC(C.int32_t(hashAlgorithm), ptr)
}

func DecryptAESGCM(key *uint8, keyLength int, data *uint8, dataLength int, nonce *uint8, nonceLength int, aad *uint8, aadLength int, tag *uint8, tagLength int, out *uint8, outLength *int) int32 {
	return int32(C._mkcgo_decryptAESGCM((*C.uint8_t)(unsafe.Pointer(key)), C.size_t(keyLength), (*C.uint8_t)(unsafe.Pointer(data)), C.size_t(dataLength), (*C.uint8_t)(unsafe.Pointer(nonce)), C.size_t(nonceLength), (*C.uint8_t)(unsafe.Pointer(aad)), C.size_t(aadLength), (*C.uint8_t)(unsafe.Pointer(tag)), C.size_t(tagLength), (*C.uint8_t)(unsafe.Pointer(out)), (*C.size_t)(unsafe.Pointer(outLength))))
}

func EncryptAESGCM(key *uint8, keyLength int, data *uint8, dataLength int, nonce *uint8, nonceLength int, aad *uint8, aadLength int, cipherText *uint8, cipherTextLength int, tag *uint8) int32 {
	return int32(C._mkcgo_encryptAESGCM((*C.uint8_t)(unsafe.Pointer(key)), C.size_t(keyLength), (*C.uint8_t)(unsafe.Pointer(data)), C.size_t(dataLength), (*C.uint8_t)(unsafe.Pointer(nonce)), C.size_t(nonceLength), (*C.uint8_t)(unsafe.Pointer(aad)), C.size_t(aadLength), (*C.uint8_t)(unsafe.Pointer(cipherText)), C.size_t(cipherTextLength), (*C.uint8_t)(unsafe.Pointer(tag))))
}

func ExpandHKDF(hashFunction int32, prk *uint8, prkLength int, info *uint8, infoLength int, okm *uint8, okmLength int) int32 {
	return int32(C._mkcgo_expandHKDF(C.int32_t(hashFunction), (*C.uint8_t)(unsafe.Pointer(prk)), C.size_t(prkLength), (*C.uint8_t)(unsafe.Pointer(info)), C.size_t(infoLength), (*C.uint8_t)(unsafe.Pointer(okm)), C.size_t(okmLength)))
}

func ExtractHKDF(hashFunction int32, secret *uint8, secretLength int, salt *uint8, saltLength int, prk *uint8, prkLength int) int32 {
	return int32(C._mkcgo_extractHKDF(C.int32_t(hashFunction), (*C.uint8_t)(unsafe.Pointer(secret)), C.size_t(secretLength), (*C.uint8_t)(unsafe.Pointer(salt)), C.size_t(saltLength), (*C.uint8_t)(unsafe.Pointer(prk)), C.size_t(prkLength)))
}

func FinalizeHMAC(hashFunction int32, ptr unsafe.Pointer, outputPointer *uint8) {
	C._mkcgo_finalizeHMAC(C.int32_t(hashFunction), ptr, (*C.uint8_t)(unsafe.Pointer(outputPointer)))
}

func FreeHMAC(hashFunction int32, ptr unsafe.Pointer) {
	C._mkcgo_freeHMAC(C.int32_t(hashFunction), ptr)
}

func GenerateKeyEd25519(key *uint8) {
	C._mkcgo_generateKeyEd25519((*C.uint8_t)(unsafe.Pointer(key)))
}

func HashBlockSize(hashAlgorithm int32) int32 {
	return int32(C._mkcgo_hashBlockSize(C.int32_t(hashAlgorithm)))
}

func HashCopy(hashAlgorithm int32, ptr unsafe.Pointer) unsafe.Pointer {
	return C._mkcgo_hashCopy(C.int32_t(hashAlgorithm), ptr)
}

func HashFree(hashAlgorithm int32, ptr unsafe.Pointer) {
	C._mkcgo_hashFree(C.int32_t(hashAlgorithm), ptr)
}

func HashNew(hashAlgorithm int32) unsafe.Pointer {
	return C._mkcgo_hashNew(C.int32_t(hashAlgorithm))
}

func HashReset(hashAlgorithm int32, ptr unsafe.Pointer) {
	C._mkcgo_hashReset(C.int32_t(hashAlgorithm), ptr)
}

func HashSize(hashAlgorithm int32) int32 {
	return int32(C._mkcgo_hashSize(C.int32_t(hashAlgorithm)))
}

func HashSum(hashAlgorithm int32, ptr unsafe.Pointer, outputPointer *uint8) {
	C._mkcgo_hashSum(C.int32_t(hashAlgorithm), ptr, (*C.uint8_t)(unsafe.Pointer(outputPointer)))
}

func HashWrite(hashAlgorithm int32, ptr unsafe.Pointer, data *uint8, length int32) {
	C._mkcgo_hashWrite(C.int32_t(hashAlgorithm), ptr, (*C.uint8_t)(unsafe.Pointer(data)), C.int(length))
}

func InitHMAC(hashFunction int32, key *uint8, keyLength int32) unsafe.Pointer {
	return C._mkcgo_initHMAC(C.int32_t(hashFunction), (*C.uint8_t)(unsafe.Pointer(key)), C.int(keyLength))
}

func NewPrivateKeyEd25519FromSeed(key *uint8, seed *uint8) int32 {
	return int32(C._mkcgo_newPrivateKeyEd25519FromSeed((*C.uint8_t)(unsafe.Pointer(key)), (*C.uint8_t)(unsafe.Pointer(seed))))
}

func NewPublicKeyEd25519(key *uint8, pub *uint8) int32 {
	return int32(C._mkcgo_newPublicKeyEd25519((*C.uint8_t)(unsafe.Pointer(key)), (*C.uint8_t)(unsafe.Pointer(pub))))
}

func SignEd25519(privateKey *uint8, message *uint8, messageLength int, sigBuffer *uint8) int32 {
	return int32(C._mkcgo_signEd25519((*C.uint8_t)(unsafe.Pointer(privateKey)), (*C.uint8_t)(unsafe.Pointer(message)), C.size_t(messageLength), (*C.uint8_t)(unsafe.Pointer(sigBuffer))))
}

func UpdateHMAC(hashFunction int32, ptr unsafe.Pointer, data *uint8, length int32) {
	C._mkcgo_updateHMAC(C.int32_t(hashFunction), ptr, (*C.uint8_t)(unsafe.Pointer(data)), C.int(length))
}

func VerifyEd25519(publicKey *uint8, message *uint8, messageLength int, sig *uint8) int32 {
	return int32(C._mkcgo_verifyEd25519((*C.uint8_t)(unsafe.Pointer(publicKey)), (*C.uint8_t)(unsafe.Pointer(message)), C.size_t(messageLength), (*C.uint8_t)(unsafe.Pointer(sig))))
}
