// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by mkcgo. DO NOT EDIT.

package security

/*
#cgo CFLAGS: -Wno-attributes
#include "zsecurity.h"
*/
import "C"
import "unsafe"

var (
	KCFAllocatorDefault                              = C.kCFAllocatorDefault
	KSecRandomDefault                                = C.kSecRandomDefault
	KSecAttrKeyTypeECSECPrimeRandom                  = C.kSecAttrKeyTypeECSECPrimeRandom
	KSecAttrKeyTypeRSA                               = C.kSecAttrKeyTypeRSA
	KSecAttrKeyClassPublic                           = C.kSecAttrKeyClassPublic
	KSecAttrKeyClassPrivate                          = C.kSecAttrKeyClassPrivate
	KSecAttrKeyType                                  = C.kSecAttrKeyType
	KSecAttrKeySizeInBits                            = C.kSecAttrKeySizeInBits
	KSecAttrKeyClass                                 = C.kSecAttrKeyClass
	KSecKeyAlgorithmECDHKeyExchangeStandard          = C.kSecKeyAlgorithmECDHKeyExchangeStandard
	KSecKeyAlgorithmRSASignatureDigestPSSSHA1        = C.kSecKeyAlgorithmRSASignatureDigestPSSSHA1
	KSecKeyAlgorithmRSASignatureDigestPSSSHA224      = C.kSecKeyAlgorithmRSASignatureDigestPSSSHA224
	KSecKeyAlgorithmRSASignatureDigestPSSSHA256      = C.kSecKeyAlgorithmRSASignatureDigestPSSSHA256
	KSecKeyAlgorithmRSASignatureDigestPSSSHA384      = C.kSecKeyAlgorithmRSASignatureDigestPSSSHA384
	KSecKeyAlgorithmRSASignatureDigestPSSSHA512      = C.kSecKeyAlgorithmRSASignatureDigestPSSSHA512
	KSecKeyAlgorithmRSAEncryptionRaw                 = C.kSecKeyAlgorithmRSAEncryptionRaw
	KSecKeyAlgorithmRSAEncryptionPKCS1               = C.kSecKeyAlgorithmRSAEncryptionPKCS1
	KSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1   = C.kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1
	KSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 = C.kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224
	KSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 = C.kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256
	KSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 = C.kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384
	KSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 = C.kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512
	KSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw    = C.kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw
	KSecKeyAlgorithmRSAEncryptionOAEPSHA1            = C.kSecKeyAlgorithmRSAEncryptionOAEPSHA1
	KSecKeyAlgorithmRSAEncryptionOAEPSHA224          = C.kSecKeyAlgorithmRSAEncryptionOAEPSHA224
	KSecKeyAlgorithmRSAEncryptionOAEPSHA256          = C.kSecKeyAlgorithmRSAEncryptionOAEPSHA256
	KSecKeyAlgorithmRSAEncryptionOAEPSHA384          = C.kSecKeyAlgorithmRSAEncryptionOAEPSHA384
	KSecKeyAlgorithmRSAEncryptionOAEPSHA512          = C.kSecKeyAlgorithmRSAEncryptionOAEPSHA512
	KSecKeyAlgorithmECDSASignatureDigestX962         = C.kSecKeyAlgorithmECDSASignatureDigestX962
)

type Boolean = C.Boolean
type CFAllocatorRef = C.CFAllocatorRef
type CFDataRef = C.CFDataRef
type CFDictionaryKeyCallBacks = C.CFDictionaryKeyCallBacks
type CFDictionaryRef = C.CFDictionaryRef
type CFDictionaryValueCallBacks = C.CFDictionaryValueCallBacks
type CFErrorRef = C.CFErrorRef
type CFIndex = C.CFIndex
type CFMutableDictionaryRef = C.CFMutableDictionaryRef
type CFNumberRef = C.CFNumberRef
type CFNumberType = C.CFNumberType
type CFStringEncoding = C.CFStringEncoding
type CFStringRef = C.CFStringRef
type CFTypeRef = C.CFTypeRef
type SecKeyAlgorithm = C.SecKeyAlgorithm
type SecKeyOperationType = C.SecKeyOperationType
type SecKeyRef = C.SecKeyRef
type SecRandomRef = C.SecRandomRef

//go:nosplit
func mkcgoNoEscape(p *C.mkcgo_err_state) *C.mkcgo_err_state {
	x := uintptr(unsafe.Pointer(p))
	return (*C.mkcgo_err_state)(unsafe.Pointer(x ^ 0))
}

func CFDataCreate(allocator CFAllocatorRef, bytes []uint8) CFDataRef {
	return C._mkcgo_CFDataCreate(allocator, (*C.uint8_t)(unsafe.Pointer(unsafe.SliceData(bytes))), CFIndex(len(bytes)))
}

func CFDataGetBytePtr(data CFDataRef) *uint8 {
	return (*uint8)(unsafe.Pointer(C._mkcgo_CFDataGetBytePtr(data)))
}

func CFDataGetLength(data CFDataRef) CFIndex {
	return C._mkcgo_CFDataGetLength(data)
}

func CFDictionaryCreate(allocator CFAllocatorRef, keys *unsafe.Pointer, values *unsafe.Pointer, numValues CFIndex, keyCallBacks *CFDictionaryKeyCallBacks, valueCallBacks *CFDictionaryValueCallBacks) CFDictionaryRef {
	return C._mkcgo_CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks)
}

func CFDictionaryCreateMutable(allocator CFAllocatorRef, capacity CFIndex, keyCallBacks *CFDictionaryKeyCallBacks, valueCallBacks *CFDictionaryValueCallBacks) CFMutableDictionaryRef {
	return C._mkcgo_CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks)
}

func CFDictionarySetValue(theDict CFMutableDictionaryRef, key unsafe.Pointer, value unsafe.Pointer) {
	C._mkcgo_CFDictionarySetValue(theDict, key, value)
}

func CFErrorCopyDescription(__error CFErrorRef) CFStringRef {
	return C._mkcgo_CFErrorCopyDescription(__error)
}

func CFErrorGetCode(__error CFErrorRef) CFIndex {
	return C._mkcgo_CFErrorGetCode(__error)
}

func CFNumberCreate(allocator CFAllocatorRef, theType CFNumberType, valuePtr unsafe.Pointer) CFNumberRef {
	return C._mkcgo_CFNumberCreate(allocator, theType, valuePtr)
}

func CFRelease(cf CFTypeRef) {
	C._mkcgo_CFRelease(cf)
}

func CFStringGetCStringPtr(str CFStringRef, encoding CFStringEncoding) *byte {
	return (*byte)(unsafe.Pointer(C._mkcgo_CFStringGetCStringPtr(str, encoding)))
}

func CFStringGetLength(str CFStringRef) CFIndex {
	return C._mkcgo_CFStringGetLength(str)
}

func SecKeyCopyExternalRepresentation(key SecKeyRef, __error *CFErrorRef) CFDataRef {
	return C._mkcgo_SecKeyCopyExternalRepresentation(key, __error)
}

func SecKeyCopyKeyExchangeResult(privateKey SecKeyRef, algorithm SecKeyAlgorithm, publicKey SecKeyRef, parameters CFDictionaryRef, __error *CFErrorRef) CFDataRef {
	return C._mkcgo_SecKeyCopyKeyExchangeResult(privateKey, algorithm, publicKey, parameters, __error)
}

func SecKeyCopyPublicKey(key SecKeyRef) SecKeyRef {
	return C._mkcgo_SecKeyCopyPublicKey(key)
}

func SecKeyCreateDecryptedData(key SecKeyRef, algorithm SecKeyAlgorithm, ciphertext CFDataRef, __error *CFErrorRef) CFDataRef {
	return C._mkcgo_SecKeyCreateDecryptedData(key, algorithm, ciphertext, __error)
}

func SecKeyCreateEncryptedData(key SecKeyRef, algorithm SecKeyAlgorithm, plaintext CFDataRef, __error *CFErrorRef) CFDataRef {
	return C._mkcgo_SecKeyCreateEncryptedData(key, algorithm, plaintext, __error)
}

func SecKeyCreateRandomKey(parameters CFDictionaryRef, __error *CFErrorRef) SecKeyRef {
	return C._mkcgo_SecKeyCreateRandomKey(parameters, __error)
}

func SecKeyCreateSignature(key SecKeyRef, algorithm SecKeyAlgorithm, data CFDataRef, __error *CFErrorRef) CFDataRef {
	return C._mkcgo_SecKeyCreateSignature(key, algorithm, data, __error)
}

func SecKeyCreateWithData(keyData CFDataRef, attributes CFDictionaryRef, __error *CFErrorRef) SecKeyRef {
	return C._mkcgo_SecKeyCreateWithData(keyData, attributes, __error)
}

func SecKeyGetBlockSize(key SecKeyRef) int {
	return int(C._mkcgo_SecKeyGetBlockSize(key))
}

func SecKeyIsAlgorithmSupported(key SecKeyRef, operation SecKeyOperationType, algorithm SecKeyAlgorithm) Boolean {
	return C._mkcgo_SecKeyIsAlgorithmSupported(key, operation, algorithm)
}

func SecKeyVerifySignature(key SecKeyRef, algorithm SecKeyAlgorithm, signedData CFDataRef, signature CFDataRef, __error *CFErrorRef) Boolean {
	return C._mkcgo_SecKeyVerifySignature(key, algorithm, signedData, signature, __error)
}

func SecRandomCopyBytes(rnd SecRandomRef, bytes []byte) int32 {
	return int32(C._mkcgo_SecRandomCopyBytes(rnd, C.size_t(len(bytes)), (*C.uchar)(unsafe.Pointer(unsafe.SliceData(bytes)))))
}
