// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// Code generated by mkcgo. DO NOT EDIT.

//go:build !cgo && darwin

package cryptokit

import (
	"syscall"
	"unsafe"
)

//go:linkname syscall_syscallN syscall.syscallN
//go:linkname entersyscall runtime.entersyscall
//go:linkname exitsyscall runtime.exitsyscall

//go:noescape
func syscall_syscallN(fn uintptr, args ...uintptr) (r1, r2 uintptr)
func entersyscall()
func exitsyscall()

//go:nosplit
func syscallN(fn uintptr, args ...uintptr) (r1, r2 uintptr, err syscall.Errno) {
	entersyscall()
	r1, r2 = syscall_syscallN(fn, args...)
	exitsyscall()
	return r1, r2, 0
}

//go:cgo_import_static go_MD5
//go:linkname go_MD5 go_MD5
//go:cgo_import_static go_SHA1
//go:linkname go_SHA1 go_SHA1
//go:cgo_import_static go_SHA256
//go:linkname go_SHA256 go_SHA256
//go:cgo_import_static go_SHA384
//go:linkname go_SHA384 go_SHA384
//go:cgo_import_static go_SHA512
//go:linkname go_SHA512 go_SHA512
//go:cgo_import_static go_copyHMAC
//go:linkname go_copyHMAC go_copyHMAC
//go:cgo_import_static go_decryptAESGCM
//go:linkname go_decryptAESGCM go_decryptAESGCM
//go:cgo_import_static go_encryptAESGCM
//go:linkname go_encryptAESGCM go_encryptAESGCM
//go:cgo_import_static go_expandHKDF
//go:linkname go_expandHKDF go_expandHKDF
//go:cgo_import_static go_extractHKDF
//go:linkname go_extractHKDF go_extractHKDF
//go:cgo_import_static go_finalizeHMAC
//go:linkname go_finalizeHMAC go_finalizeHMAC
//go:cgo_import_static go_freeHMAC
//go:linkname go_freeHMAC go_freeHMAC
//go:cgo_import_static go_generateKeyEd25519
//go:linkname go_generateKeyEd25519 go_generateKeyEd25519
//go:cgo_import_static go_hashBlockSize
//go:linkname go_hashBlockSize go_hashBlockSize
//go:cgo_import_static go_hashCopy
//go:linkname go_hashCopy go_hashCopy
//go:cgo_import_static go_hashFree
//go:linkname go_hashFree go_hashFree
//go:cgo_import_static go_hashNew
//go:linkname go_hashNew go_hashNew
//go:cgo_import_static go_hashReset
//go:linkname go_hashReset go_hashReset
//go:cgo_import_static go_hashSize
//go:linkname go_hashSize go_hashSize
//go:cgo_import_static go_hashSum
//go:linkname go_hashSum go_hashSum
//go:cgo_import_static go_hashWrite
//go:linkname go_hashWrite go_hashWrite
//go:cgo_import_static go_initHMAC
//go:linkname go_initHMAC go_initHMAC
//go:cgo_import_static go_newPrivateKeyEd25519FromSeed
//go:linkname go_newPrivateKeyEd25519FromSeed go_newPrivateKeyEd25519FromSeed
//go:cgo_import_static go_newPublicKeyEd25519
//go:linkname go_newPublicKeyEd25519 go_newPublicKeyEd25519
//go:cgo_import_static go_signEd25519
//go:linkname go_signEd25519 go_signEd25519
//go:cgo_import_static go_updateHMAC
//go:linkname go_updateHMAC go_updateHMAC
//go:cgo_import_static go_verifyEd25519
//go:linkname go_verifyEd25519 go_verifyEd25519

var go_MD5 byte
var go_SHA1 byte
var go_SHA256 byte
var go_SHA384 byte
var go_SHA512 byte
var go_copyHMAC byte
var go_decryptAESGCM byte
var go_encryptAESGCM byte
var go_expandHKDF byte
var go_extractHKDF byte
var go_finalizeHMAC byte
var go_freeHMAC byte
var go_generateKeyEd25519 byte
var go_hashBlockSize byte
var go_hashCopy byte
var go_hashFree byte
var go_hashNew byte
var go_hashReset byte
var go_hashSize byte
var go_hashSum byte
var go_hashWrite byte
var go_initHMAC byte
var go_newPrivateKeyEd25519FromSeed byte
var go_newPublicKeyEd25519 byte
var go_signEd25519 byte
var go_updateHMAC byte
var go_verifyEd25519 byte

func MD5(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_MD5)), uintptr(unsafe.Pointer(inputPointer)), uintptr(inputLength), uintptr(unsafe.Pointer(outputPointer)))
}

func SHA1(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_SHA1)), uintptr(unsafe.Pointer(inputPointer)), uintptr(inputLength), uintptr(unsafe.Pointer(outputPointer)))
}

func SHA256(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_SHA256)), uintptr(unsafe.Pointer(inputPointer)), uintptr(inputLength), uintptr(unsafe.Pointer(outputPointer)))
}

func SHA384(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_SHA384)), uintptr(unsafe.Pointer(inputPointer)), uintptr(inputLength), uintptr(unsafe.Pointer(outputPointer)))
}

func SHA512(inputPointer *uint8, inputLength int, outputPointer *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_SHA512)), uintptr(unsafe.Pointer(inputPointer)), uintptr(inputLength), uintptr(unsafe.Pointer(outputPointer)))
}

func CopyHMAC(hashAlgorithm int32, ptr unsafe.Pointer) unsafe.Pointer {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_copyHMAC)), uintptr(hashAlgorithm), uintptr(ptr), 0)
	return unsafe.Pointer(r0)
}

func DecryptAESGCM(key *uint8, keyLength int, data *uint8, dataLength int, nonce *uint8, nonceLength int, aad *uint8, aadLength int, tag *uint8, tagLength int, out *uint8, outLength *int) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_decryptAESGCM)), uintptr(unsafe.Pointer(key)), uintptr(keyLength), uintptr(unsafe.Pointer(data)), uintptr(dataLength), uintptr(unsafe.Pointer(nonce)), uintptr(nonceLength), uintptr(unsafe.Pointer(aad)), uintptr(aadLength), uintptr(unsafe.Pointer(tag)), uintptr(tagLength), uintptr(unsafe.Pointer(out)), uintptr(unsafe.Pointer(outLength)))
	return int32(r0)
}

func EncryptAESGCM(key *uint8, keyLength int, data *uint8, dataLength int, nonce *uint8, nonceLength int, aad *uint8, aadLength int, cipherText *uint8, cipherTextLength int, tag *uint8) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_encryptAESGCM)), uintptr(unsafe.Pointer(key)), uintptr(keyLength), uintptr(unsafe.Pointer(data)), uintptr(dataLength), uintptr(unsafe.Pointer(nonce)), uintptr(nonceLength), uintptr(unsafe.Pointer(aad)), uintptr(aadLength), uintptr(unsafe.Pointer(cipherText)), uintptr(cipherTextLength), uintptr(unsafe.Pointer(tag)))
	return int32(r0)
}

func ExpandHKDF(hashFunction int32, prk *uint8, prkLength int, info *uint8, infoLength int, okm *uint8, okmLength int) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_expandHKDF)), uintptr(hashFunction), uintptr(unsafe.Pointer(prk)), uintptr(prkLength), uintptr(unsafe.Pointer(info)), uintptr(infoLength), uintptr(unsafe.Pointer(okm)), uintptr(okmLength))
	return int32(r0)
}

func ExtractHKDF(hashFunction int32, secret *uint8, secretLength int, salt *uint8, saltLength int, prk *uint8, prkLength int) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_extractHKDF)), uintptr(hashFunction), uintptr(unsafe.Pointer(secret)), uintptr(secretLength), uintptr(unsafe.Pointer(salt)), uintptr(saltLength), uintptr(unsafe.Pointer(prk)), uintptr(prkLength))
	return int32(r0)
}

func FinalizeHMAC(hashFunction int32, ptr unsafe.Pointer, outputPointer *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_finalizeHMAC)), uintptr(hashFunction), uintptr(ptr), uintptr(unsafe.Pointer(outputPointer)))
}

func FreeHMAC(hashFunction int32, ptr unsafe.Pointer) {
	syscallN(uintptr(unsafe.Pointer(&go_freeHMAC)), uintptr(hashFunction), uintptr(ptr), 0)
}

func GenerateKeyEd25519(key *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_generateKeyEd25519)), uintptr(unsafe.Pointer(key)), 0, 0)
}

func HashBlockSize(hashAlgorithm int32) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_hashBlockSize)), uintptr(hashAlgorithm), 0, 0)
	return int32(r0)
}

func HashCopy(hashAlgorithm int32, ptr unsafe.Pointer) unsafe.Pointer {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_hashCopy)), uintptr(hashAlgorithm), uintptr(ptr), 0)
	return unsafe.Pointer(r0)
}

func HashFree(hashAlgorithm int32, ptr unsafe.Pointer) {
	syscallN(uintptr(unsafe.Pointer(&go_hashFree)), uintptr(hashAlgorithm), uintptr(ptr), 0)
}

func HashNew(hashAlgorithm int32) unsafe.Pointer {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_hashNew)), uintptr(hashAlgorithm), 0, 0)
	return unsafe.Pointer(r0)
}

func HashReset(hashAlgorithm int32, ptr unsafe.Pointer) {
	syscallN(uintptr(unsafe.Pointer(&go_hashReset)), uintptr(hashAlgorithm), uintptr(ptr), 0)
}

func HashSize(hashAlgorithm int32) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_hashSize)), uintptr(hashAlgorithm), 0, 0)
	return int32(r0)
}

func HashSum(hashAlgorithm int32, ptr unsafe.Pointer, outputPointer *uint8) {
	syscallN(uintptr(unsafe.Pointer(&go_hashSum)), uintptr(hashAlgorithm), uintptr(ptr), uintptr(unsafe.Pointer(outputPointer)))
}

func HashWrite(hashAlgorithm int32, ptr unsafe.Pointer, data *uint8, length int32) {
	syscallN(uintptr(unsafe.Pointer(&go_hashWrite)), uintptr(hashAlgorithm), uintptr(ptr), uintptr(unsafe.Pointer(data)), uintptr(length), 0, 0)
}

func InitHMAC(hashFunction int32, key *uint8, keyLength int32) unsafe.Pointer {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_initHMAC)), uintptr(hashFunction), uintptr(unsafe.Pointer(key)), uintptr(keyLength))
	return unsafe.Pointer(r0)
}

func NewPrivateKeyEd25519FromSeed(key *uint8, seed *uint8) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_newPrivateKeyEd25519FromSeed)), uintptr(unsafe.Pointer(key)), uintptr(unsafe.Pointer(seed)), 0)
	return int32(r0)
}

func NewPublicKeyEd25519(key *uint8, pub *uint8) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_newPublicKeyEd25519)), uintptr(unsafe.Pointer(key)), uintptr(unsafe.Pointer(pub)), 0)
	return int32(r0)
}

func SignEd25519(privateKey *uint8, message *uint8, messageLength int, sigBuffer *uint8) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_signEd25519)), uintptr(unsafe.Pointer(privateKey)), uintptr(unsafe.Pointer(message)), uintptr(messageLength), uintptr(unsafe.Pointer(sigBuffer)), 0, 0)
	return int32(r0)
}

func UpdateHMAC(hashFunction int32, ptr unsafe.Pointer, data *uint8, length int32) {
	syscallN(uintptr(unsafe.Pointer(&go_updateHMAC)), uintptr(hashFunction), uintptr(ptr), uintptr(unsafe.Pointer(data)), uintptr(length), 0, 0)
}

func VerifyEd25519(publicKey *uint8, message *uint8, messageLength int, sig *uint8) int32 {
	r0, _, _ := syscallN(uintptr(unsafe.Pointer(&go_verifyEd25519)), uintptr(unsafe.Pointer(publicKey)), uintptr(unsafe.Pointer(message)), uintptr(messageLength), uintptr(unsafe.Pointer(sig)), 0, 0)
	return int32(r0)
}
