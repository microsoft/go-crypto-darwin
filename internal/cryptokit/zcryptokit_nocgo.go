// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by mkcgo. DO NOT EDIT.

//go:build !cgo

package cryptokit

import (
	"runtime"
	"unsafe"
)

var _ = runtime.GOOS

//go:linkname go_MD5 go_MD5
//go:linkname go_SHA1 go_SHA1
//go:linkname go_SHA256 go_SHA256
//go:linkname go_SHA384 go_SHA384
//go:linkname go_SHA3_256 go_SHA3_256
//go:linkname go_SHA3_384 go_SHA3_384
//go:linkname go_SHA3_512 go_SHA3_512
//go:linkname go_SHA512 go_SHA512
//go:linkname go_copyHMAC go_copyHMAC
//go:linkname go_decryptAESGCM go_decryptAESGCM
//go:linkname go_encryptAESGCM go_encryptAESGCM
//go:linkname go_expandHKDF go_expandHKDF
//go:linkname go_extractHKDF go_extractHKDF
//go:linkname go_finalizeHMAC go_finalizeHMAC
//go:linkname go_freeHMAC go_freeHMAC
//go:linkname go_generateKeyEd25519 go_generateKeyEd25519
//go:linkname go_hashBlockSize go_hashBlockSize
//go:linkname go_hashCopy go_hashCopy
//go:linkname go_hashFree go_hashFree
//go:linkname go_hashNew go_hashNew
//go:linkname go_hashReset go_hashReset
//go:linkname go_hashSize go_hashSize
//go:linkname go_hashSum go_hashSum
//go:linkname go_hashWrite go_hashWrite
//go:linkname go_initHMAC go_initHMAC
//go:linkname go_newPrivateKeyEd25519FromSeed go_newPrivateKeyEd25519FromSeed
//go:linkname go_newPublicKeyEd25519 go_newPublicKeyEd25519
//go:linkname go_signEd25519 go_signEd25519
//go:linkname go_supportsSHA3 go_supportsSHA3
//go:linkname go_updateHMAC go_updateHMAC
//go:linkname go_verifyEd25519 go_verifyEd25519

var go_MD5 byte
var go_SHA1 byte
var go_SHA256 byte
var go_SHA384 byte
var go_SHA3_256 byte
var go_SHA3_384 byte
var go_SHA3_512 byte
var go_SHA512 byte
var go_copyHMAC byte
var go_decryptAESGCM byte
var go_encryptAESGCM byte
var go_expandHKDF byte
var go_extractHKDF byte
var go_finalizeHMAC byte
var go_freeHMAC byte
var go_generateKeyEd25519 byte
var go_hashBlockSize byte
var go_hashCopy byte
var go_hashFree byte
var go_hashNew byte
var go_hashReset byte
var go_hashSize byte
var go_hashSum byte
var go_hashWrite byte
var go_initHMAC byte
var go_newPrivateKeyEd25519FromSeed byte
var go_newPublicKeyEd25519 byte
var go_signEd25519 byte
var go_supportsSHA3 byte
var go_updateHMAC byte
var go_verifyEd25519 byte

func MD5(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_MD5)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func SHA1(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_SHA1)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func SHA256(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_SHA256)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func SHA384(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_SHA384)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func SHA3_256(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_SHA3_256)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func SHA3_384(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_SHA3_384)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func SHA3_512(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_SHA3_512)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func SHA512(inputPointer []uint8, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_SHA512)), uintptr(unsafe.Pointer(unsafe.SliceData(inputPointer))), uintptr(len(inputPointer)), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func CopyHMAC(hashAlgorithm int32, ptr unsafe.Pointer) unsafe.Pointer {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_copyHMAC)), uintptr(hashAlgorithm), uintptr(ptr))
	return unsafe.Pointer(r0)
}

func DecryptAESGCM(key []uint8, data []uint8, nonce []uint8, aad []uint8, tag []uint8, out []uint8, outLength *int) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_decryptAESGCM)), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(len(key)), uintptr(unsafe.Pointer(unsafe.SliceData(data))), uintptr(len(data)), uintptr(unsafe.Pointer(unsafe.SliceData(nonce))), uintptr(len(nonce)), uintptr(unsafe.Pointer(unsafe.SliceData(aad))), uintptr(len(aad)), uintptr(unsafe.Pointer(unsafe.SliceData(tag))), uintptr(len(tag)), uintptr(unsafe.Pointer(unsafe.SliceData(out))), uintptr(unsafe.Pointer(outLength)))
	return int32(r0)
}

func EncryptAESGCM(key []uint8, data []uint8, nonce []uint8, aad []uint8, cipherText []uint8, tag []uint8) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_encryptAESGCM)), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(len(key)), uintptr(unsafe.Pointer(unsafe.SliceData(data))), uintptr(len(data)), uintptr(unsafe.Pointer(unsafe.SliceData(nonce))), uintptr(len(nonce)), uintptr(unsafe.Pointer(unsafe.SliceData(aad))), uintptr(len(aad)), uintptr(unsafe.Pointer(unsafe.SliceData(cipherText))), uintptr(len(cipherText)), uintptr(unsafe.Pointer(unsafe.SliceData(tag))))
	return int32(r0)
}

func ExpandHKDF(hashFunction int32, prk []uint8, info []uint8, okm []uint8) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_expandHKDF)), uintptr(hashFunction), uintptr(unsafe.Pointer(unsafe.SliceData(prk))), uintptr(len(prk)), uintptr(unsafe.Pointer(unsafe.SliceData(info))), uintptr(len(info)), uintptr(unsafe.Pointer(unsafe.SliceData(okm))), uintptr(len(okm)))
	return int32(r0)
}

func ExtractHKDF(hashFunction int32, secret []uint8, salt []uint8, prk []uint8) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_extractHKDF)), uintptr(hashFunction), uintptr(unsafe.Pointer(unsafe.SliceData(secret))), uintptr(len(secret)), uintptr(unsafe.Pointer(unsafe.SliceData(salt))), uintptr(len(salt)), uintptr(unsafe.Pointer(unsafe.SliceData(prk))), uintptr(len(prk)))
	return int32(r0)
}

func FinalizeHMAC(hashFunction int32, ptr unsafe.Pointer, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_finalizeHMAC)), uintptr(hashFunction), uintptr(ptr), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func FreeHMAC(hashFunction int32, ptr unsafe.Pointer) {
	syscallN(0, uintptr(unsafe.Pointer(&go_freeHMAC)), uintptr(hashFunction), uintptr(ptr))
}

func GenerateKeyEd25519(key []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_generateKeyEd25519)), uintptr(unsafe.Pointer(unsafe.SliceData(key))))
}

func HashBlockSize(hashAlgorithm int32) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_hashBlockSize)), uintptr(hashAlgorithm))
	return int32(r0)
}

func HashCopy(hashAlgorithm int32, ptr unsafe.Pointer) unsafe.Pointer {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_hashCopy)), uintptr(hashAlgorithm), uintptr(ptr))
	return unsafe.Pointer(r0)
}

func HashFree(hashAlgorithm int32, ptr unsafe.Pointer) {
	syscallN(0, uintptr(unsafe.Pointer(&go_hashFree)), uintptr(hashAlgorithm), uintptr(ptr))
}

func HashNew(hashAlgorithm int32) unsafe.Pointer {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_hashNew)), uintptr(hashAlgorithm))
	return unsafe.Pointer(r0)
}

func HashReset(hashAlgorithm int32, ptr unsafe.Pointer) {
	syscallN(0, uintptr(unsafe.Pointer(&go_hashReset)), uintptr(hashAlgorithm), uintptr(ptr))
}

func HashSize(hashAlgorithm int32) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_hashSize)), uintptr(hashAlgorithm))
	return int32(r0)
}

func HashSum(hashAlgorithm int32, ptr unsafe.Pointer, outputPointer []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_hashSum)), uintptr(hashAlgorithm), uintptr(ptr), uintptr(unsafe.Pointer(unsafe.SliceData(outputPointer))))
}

func HashWrite(hashAlgorithm int32, ptr unsafe.Pointer, data []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_hashWrite)), uintptr(hashAlgorithm), uintptr(ptr), uintptr(unsafe.Pointer(unsafe.SliceData(data))), uintptr(len(data)))
}

func InitHMAC(hashFunction int32, key []uint8) unsafe.Pointer {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_initHMAC)), uintptr(hashFunction), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(len(key)))
	return unsafe.Pointer(r0)
}

func NewPrivateKeyEd25519FromSeed(key []uint8, seed []uint8) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_newPrivateKeyEd25519FromSeed)), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(unsafe.Pointer(unsafe.SliceData(seed))))
	return int32(r0)
}

func NewPublicKeyEd25519(key []uint8, pub []uint8) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_newPublicKeyEd25519)), uintptr(unsafe.Pointer(unsafe.SliceData(key))), uintptr(unsafe.Pointer(unsafe.SliceData(pub))))
	return int32(r0)
}

func SignEd25519(privateKey []uint8, message []uint8, sigBuffer []uint8) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_signEd25519)), uintptr(unsafe.Pointer(unsafe.SliceData(privateKey))), uintptr(unsafe.Pointer(unsafe.SliceData(message))), uintptr(len(message)), uintptr(unsafe.Pointer(unsafe.SliceData(sigBuffer))))
	return int32(r0)
}

func SupportsSHA3() int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_supportsSHA3)))
	return int32(r0)
}

func UpdateHMAC(hashFunction int32, ptr unsafe.Pointer, data []uint8) {
	syscallN(0, uintptr(unsafe.Pointer(&go_updateHMAC)), uintptr(hashFunction), uintptr(ptr), uintptr(unsafe.Pointer(unsafe.SliceData(data))), uintptr(len(data)))
}

func VerifyEd25519(publicKey []uint8, message []uint8, sig []uint8) int32 {
	r0, _ := syscallN(0, uintptr(unsafe.Pointer(&go_verifyEd25519)), uintptr(unsafe.Pointer(unsafe.SliceData(publicKey))), uintptr(unsafe.Pointer(unsafe.SliceData(message))), uintptr(len(message)), uintptr(unsafe.Pointer(unsafe.SliceData(sig))))
	return int32(r0)
}
