// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// Code generated by mkcgo. DO NOT EDIT.

//go:build !cgo

package commoncrypto

import (
	"runtime"
	"unsafe"
)

//go:cgo_import_dynamic _mkcgo_CCCrypt CCCrypt "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorCreate CCCryptorCreate "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorCreateWithMode CCCryptorCreateWithMode "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorRelease CCCryptorRelease "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorReset CCCryptorReset "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCCryptorUpdate CCCryptorUpdate "/System/Library/Frameworks/System.framework/Versions/B/System"
//go:cgo_import_dynamic _mkcgo_CCKeyDerivationPBKDF CCKeyDerivationPBKDF "/System/Library/Frameworks/System.framework/Versions/B/System"

type CCCryptorRef unsafe.Pointer
type CCModeOptions = uint32

type CCOperation int32

const (
	KCCEncrypt CCOperation = 0
	KCCDecrypt CCOperation = 1
)

type CCMode int32

const (
	KCCModeCBC CCMode = 2
)

type CCOptions int32

const (
	KCCOptionECBMode CCOptions = 2
)

type CCCryptorStatus int32

const (
	KCCSuccess CCCryptorStatus = 0
)

type CCPBKDFAlgorithm int32

const (
	KCCPBKDF2 CCPBKDFAlgorithm = 2
)

type CCPseudoRandomAlgorithm int32

const (
	KCCPRFHmacAlgSHA1   CCPseudoRandomAlgorithm = 1
	KCCPRFHmacAlgSHA256 CCPseudoRandomAlgorithm = 3
	KCCPRFHmacAlgSHA384 CCPseudoRandomAlgorithm = 4
	KCCPRFHmacAlgSHA512 CCPseudoRandomAlgorithm = 5
)

const (
	KCCBlockSizeAES128 = 16
	KCCBlockSizeDES    = 8
)

type CCPadding int32

const (
	CcNoPadding CCPadding = 0
)

type CCAlgorithm int32

const (
	KCCAlgorithmAES  CCAlgorithm = 0
	KCCAlgorithmDES  CCAlgorithm = 1
	KCCAlgorithm3DES CCAlgorithm = 2
	KCCAlgorithmRC4  CCAlgorithm = 4
)

var _mkcgo_CCCrypt_trampoline_addr uintptr

func CCCrypt(op CCOperation, alg CCAlgorithm, options CCOptions, key unsafe.Pointer, keyLength int, iv unsafe.Pointer, dataIn unsafe.Pointer, dataInLength int, dataOut unsafe.Pointer, dataOutAvailable int, dataOutMoved *int) CCCryptorStatus {
	r0, _, _ := syscallN(_mkcgo_CCCrypt_trampoline_addr, uintptr(op), uintptr(alg), uintptr(options), uintptr(key), uintptr(keyLength), uintptr(iv), uintptr(dataIn), uintptr(dataInLength), uintptr(dataOut), uintptr(dataOutAvailable), uintptr(unsafe.Pointer(dataOutMoved)))
	runtime.KeepAlive(dataOutMoved)
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorCreate_trampoline_addr uintptr

func CCCryptorCreate(op CCOperation, alg CCAlgorithm, options CCOptions, key unsafe.Pointer, keyLength int, iv unsafe.Pointer, cryptorRef *CCCryptorRef) CCCryptorStatus {
	r0, _, _ := syscallN(_mkcgo_CCCryptorCreate_trampoline_addr, uintptr(op), uintptr(alg), uintptr(options), uintptr(key), uintptr(keyLength), uintptr(iv), uintptr(unsafe.Pointer(cryptorRef)))
	runtime.KeepAlive(cryptorRef)
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorCreateWithMode_trampoline_addr uintptr

func CCCryptorCreateWithMode(op CCOperation, mode CCMode, alg CCAlgorithm, padding CCPadding, iv unsafe.Pointer, key unsafe.Pointer, keyLength int, tweak unsafe.Pointer, tweakLength int, numRounds int32, options CCModeOptions, cryptorRef *CCCryptorRef) CCCryptorStatus {
	var r0 uintptr
	if runtime.GOOS == "darwin" && runtime.GOARCH == "arm64" {
		r0, _, _ = syscallN(_mkcgo_CCCryptorCreateWithMode_trampoline_addr, uintptr(op), uintptr(mode), uintptr(alg), uintptr(padding), uintptr(iv), uintptr(key), uintptr(keyLength), uintptr(tweak), uintptr(tweakLength), uintptr(numRounds)<<32|uintptr(options), uintptr(unsafe.Pointer(cryptorRef)))
	} else {
		r0, _, _ = syscallN(_mkcgo_CCCryptorCreateWithMode_trampoline_addr, uintptr(op), uintptr(mode), uintptr(alg), uintptr(padding), uintptr(iv), uintptr(key), uintptr(keyLength), uintptr(tweak), uintptr(tweakLength), uintptr(numRounds), uintptr(options), uintptr(unsafe.Pointer(cryptorRef)))
	}
	runtime.KeepAlive(cryptorRef)
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorRelease_trampoline_addr uintptr

func CCCryptorRelease(cryptorRef CCCryptorRef) CCCryptorStatus {
	r0, _, _ := syscallN(_mkcgo_CCCryptorRelease_trampoline_addr, uintptr(cryptorRef))
	runtime.KeepAlive(cryptorRef)
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorReset_trampoline_addr uintptr

func CCCryptorReset(cryptorRef CCCryptorRef, iv unsafe.Pointer) CCCryptorStatus {
	r0, _, _ := syscallN(_mkcgo_CCCryptorReset_trampoline_addr, uintptr(cryptorRef), uintptr(iv))
	runtime.KeepAlive(cryptorRef)
	return CCCryptorStatus(r0)
}

var _mkcgo_CCCryptorUpdate_trampoline_addr uintptr

func CCCryptorUpdate(cryptorRef CCCryptorRef, dataIn unsafe.Pointer, dataInLength int, dataOut unsafe.Pointer, dataOutAvailable int, dataOutMoved *int) CCCryptorStatus {
	r0, _, _ := syscallN(_mkcgo_CCCryptorUpdate_trampoline_addr, uintptr(cryptorRef), uintptr(dataIn), uintptr(dataInLength), uintptr(dataOut), uintptr(dataOutAvailable), uintptr(unsafe.Pointer(dataOutMoved)))
	runtime.KeepAlive(cryptorRef)
	runtime.KeepAlive(dataOutMoved)
	return CCCryptorStatus(r0)
}

var _mkcgo_CCKeyDerivationPBKDF_trampoline_addr uintptr

func CCKeyDerivationPBKDF(algorithm CCPBKDFAlgorithm, password *byte, passwordLen int, salt *uint8, saltLen int, prf CCPseudoRandomAlgorithm, rounds uint32, derivedKey *uint8, derivedKeyLen int) CCCryptorStatus {
	r0, _, _ := syscallN(_mkcgo_CCKeyDerivationPBKDF_trampoline_addr, uintptr(algorithm), uintptr(unsafe.Pointer(password)), uintptr(passwordLen), uintptr(unsafe.Pointer(salt)), uintptr(saltLen), uintptr(prf), uintptr(rounds), uintptr(unsafe.Pointer(derivedKey)), uintptr(derivedKeyLen))
	runtime.KeepAlive(password)
	runtime.KeepAlive(salt)
	runtime.KeepAlive(derivedKey)
	return CCCryptorStatus(r0)
}
