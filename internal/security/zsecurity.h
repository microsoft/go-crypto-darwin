// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// Code generated by mkcgo. DO NOT EDIT.

#ifndef MKCGO_H // only include this header once
#define MKCGO_H

#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef unsigned char Boolean;
typedef void* SecRandomRef;
typedef void* SecKeyRef;
typedef void* CFDataRef;
typedef void* CFTypeRef;
typedef void* CFStringRef;
typedef void* CFDictionaryRef;
typedef void* CFMutableDictionaryRef;
typedef void* CFNumberRef;
typedef void* CFErrorRef;
typedef void* CFAllocatorRef;
typedef void* CFDictionaryKeyCallBacks;
typedef void* CFDictionaryValueCallBacks;
typedef int32_t CFIndex;
typedef CFStringRef SecKeyAlgorithm;

extern const SecRandomRef kSecRandomDefault;
extern const CFAllocatorRef kCFAllocatorDefault;
extern const CFStringRef kSecAttrKeyTypeECSECPrimeRandom;
extern const CFStringRef kSecAttrKeyTypeRSA;
extern const CFStringRef kSecAttrKeyClassPublic;
extern const CFStringRef kSecAttrKeyClassPrivate;
extern const CFStringRef kSecAttrKeyType;
extern const CFStringRef kSecAttrKeySizeInBits;
extern const CFStringRef kSecAttrKeyClass;
extern const CFStringRef kSecKeyAlgorithmECDHKeyExchangeStandard;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPSSSHA1;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPSSSHA224;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPSSSHA256;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPSSSHA384;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPSSSHA512;
extern const CFStringRef kSecKeyAlgorithmRSAEncryptionRaw;
extern const CFStringRef kSecKeyAlgorithmRSAEncryptionPKCS1;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512;
extern const CFStringRef kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw;
extern const CFStringRef kSecKeyAlgorithmRSAEncryptionOAEPSHA1;
extern const CFStringRef kSecKeyAlgorithmRSAEncryptionOAEPSHA224;
extern const CFStringRef kSecKeyAlgorithmRSAEncryptionOAEPSHA256;
extern const CFStringRef kSecKeyAlgorithmRSAEncryptionOAEPSHA384;
extern const CFStringRef kSecKeyAlgorithmRSAEncryptionOAEPSHA512;
extern const CFStringRef kSecKeyAlgorithmECDSASignatureDigestX962;

typedef enum {
	kSecKeyOperationTypeSign = 0,
	kSecKeyOperationTypeVerify = 1,
	kSecKeyOperationTypeEncrypt = 2,
	kSecKeyOperationTypeDecrypt = 3,
	kSecKeyOperationTypeKeyExchange = 4,
} SecKeyOperationType;

typedef enum {
	kCFStringEncodingUTF8 = 0x08000100,
} CFStringEncoding;

typedef enum {
	kCFNumberIntType = 9,
} CFNumberType;

typedef void* mkcgo_err_state;
mkcgo_err_state mkcgo_err_retrieve();
void mkcgo_err_free(mkcgo_err_state);
void mkcgo_err_clear();


CFDataRef _mkcgo_CFDataCreate(CFAllocatorRef, const uint8_t*, CFIndex);
const uint8_t* _mkcgo_CFDataGetBytePtr(CFDataRef);
CFIndex _mkcgo_CFDataGetLength(CFDataRef);
CFDictionaryRef _mkcgo_CFDictionaryCreate(CFAllocatorRef, const void**, const void**, CFIndex, const CFDictionaryKeyCallBacks*, const CFDictionaryValueCallBacks*);
CFMutableDictionaryRef _mkcgo_CFDictionaryCreateMutable(CFAllocatorRef, CFIndex, const CFDictionaryKeyCallBacks*, const CFDictionaryValueCallBacks*);
void _mkcgo_CFDictionarySetValue(CFMutableDictionaryRef, const void*, const void*);
CFStringRef _mkcgo_CFErrorCopyDescription(CFErrorRef);
CFIndex _mkcgo_CFErrorGetCode(CFErrorRef);
CFNumberRef _mkcgo_CFNumberCreate(CFAllocatorRef, CFNumberType, const void*);
void _mkcgo_CFRelease(CFTypeRef);
const char* _mkcgo_CFStringGetCStringPtr(CFStringRef, CFStringEncoding);
CFIndex _mkcgo_CFStringGetLength(CFStringRef);
CFDataRef _mkcgo_SecKeyCopyExternalRepresentation(SecKeyRef, CFErrorRef*);
CFDataRef _mkcgo_SecKeyCopyKeyExchangeResult(SecKeyRef, SecKeyAlgorithm, SecKeyRef, CFDictionaryRef, CFErrorRef*);
SecKeyRef _mkcgo_SecKeyCopyPublicKey(SecKeyRef);
CFDataRef _mkcgo_SecKeyCreateDecryptedData(SecKeyRef, SecKeyAlgorithm, CFDataRef, CFErrorRef*);
CFDataRef _mkcgo_SecKeyCreateEncryptedData(SecKeyRef, SecKeyAlgorithm, CFDataRef, CFErrorRef*);
SecKeyRef _mkcgo_SecKeyCreateRandomKey(CFDictionaryRef, CFErrorRef*);
CFDataRef _mkcgo_SecKeyCreateSignature(SecKeyRef, SecKeyAlgorithm, CFDataRef, CFErrorRef*);
SecKeyRef _mkcgo_SecKeyCreateWithData(CFDataRef, CFDictionaryRef, CFErrorRef*);
size_t _mkcgo_SecKeyGetBlockSize(SecKeyRef);
Boolean _mkcgo_SecKeyIsAlgorithmSupported(SecKeyRef, SecKeyOperationType, SecKeyAlgorithm);
Boolean _mkcgo_SecKeyVerifySignature(SecKeyRef, SecKeyAlgorithm, CFDataRef, CFDataRef, CFErrorRef*);
int _mkcgo_SecRandomCopyBytes(SecRandomRef, size_t, void*);

#endif // MKCGO_H
